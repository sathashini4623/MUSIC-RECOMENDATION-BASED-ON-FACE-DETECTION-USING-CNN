import cv2
import webbrowser
import random

# Function to open a web browser with a music recommendation based on emotion
def recommend_music(emotion):
    music_recommendations = {
        "happy": "https://www.youtube.com/watch?v=PHgc8Q6qTjc",  # Replace with actual happy music link
        "sad": "https://www.youtube.com/watch?v=CnAmeh0-E-U",    # Replace with actual sad music link
        "neutral": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # Replace with actual neutral music link
    }

    if emotion in music_recommendations:
        webbrowser.open(music_recommendations[emotion])
    else:
        print("Emotion not recognized. No music recommendation available.")

# Load the pre-trained face detection model from OpenCV
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Open the webcam
cap = cv2.VideoCapture(0)

while True:
    # Read a frame from the webcam
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Iterate over detected faces
    for (x, y, w, h) in faces:
        # Draw a rectangle around the detected face
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Randomly assign an emotion for simplicity (replace this with an actual emotion recognition model)
        emotions = ["happy", "sad", "neutral"]
        detected_emotion = random.choice(emotions)

        # Display the detected emotion
        cv2.putText(frame, f"Emotion: {detected_emotion}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

        # Recommend music based on the detected emotion
        recommend_music(detected_emotion)

        # Break the loop after the first face is detected
        break

    # Display the frame
    cv2.imshow('Music Recommendation Based on Face Detection', frame)

    # Break the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close the OpenCV window
cap.release()
cv2.destroyAllWindows()
